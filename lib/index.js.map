{"version":3,"file":"index.js","sources":["../node_modules/inflection/lib/inflection.js","../src/nameConverter.ts","../node_modules/graphql/language/kinds.mjs","../src/DateType.ts","../src/utils/TypeCheck.ts","../src/TypeMapper.ts","../src/SchemaBuilder.ts"],"sourcesContent":["/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n\n( function ( root, factory ){\n  if( typeof define === 'function' && define.amd ){\n    define([], factory );\n  }else if( typeof exports === 'object' ){\n    module.exports = factory();\n  }else{\n    root.inflection = factory();\n  }\n}( this, function (){\n\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [\n    // 'access',\n    'accommodation',\n    'adulthood',\n    'advertising',\n    'advice',\n    'aggression',\n    'aid',\n    'air',\n    'aircraft',\n    'alcohol',\n    'anger',\n    'applause',\n    'arithmetic',\n    // 'art',\n    'assistance',\n    'athletics',\n    // 'attention',\n\n    'bacon',\n    'baggage',\n    // 'ballet',\n    // 'beauty',\n    'beef',\n    // 'beer',\n    // 'behavior',\n    'biology',\n    // 'billiards',\n    'blood',\n    'botany',\n    // 'bowels',\n    'bread',\n    // 'business',\n    'butter',\n\n    'carbon',\n    'cardboard',\n    'cash',\n    'chalk',\n    'chaos',\n    'chess',\n    'crossroads',\n    'countryside',\n\n    // 'damage',\n    'dancing',\n    // 'danger',\n    'deer',\n    // 'delight',\n    // 'dessert',\n    'dignity',\n    'dirt',\n    // 'distribution',\n    'dust',\n\n    'economics',\n    'education',\n    'electricity',\n    // 'employment',\n    // 'energy',\n    'engineering',\n    'enjoyment',\n    // 'entertainment',\n    'envy',\n    'equipment',\n    'ethics',\n    'evidence',\n    'evolution',\n\n    // 'failure',\n    // 'faith',\n    'fame',\n    'fiction',\n    // 'fish',\n    'flour',\n    'flu',\n    'food',\n    // 'freedom',\n    // 'fruit',\n    'fuel',\n    'fun',\n    // 'funeral',\n    'furniture',\n\n    'gallows',\n    'garbage',\n    'garlic',\n    // 'gas',\n    'genetics',\n    // 'glass',\n    'gold',\n    'golf',\n    'gossip',\n    'grammar',\n    // 'grass',\n    'gratitude',\n    'grief',\n    // 'ground',\n    'guilt',\n    'gymnastics',\n\n    // 'hair',\n    'happiness',\n    'hardware',\n    'harm',\n    'hate',\n    'hatred',\n    'health',\n    'heat',\n    // 'height',\n    'help',\n    'homework',\n    'honesty',\n    'honey',\n    'hospitality',\n    'housework',\n    'humour',\n    'hunger',\n    'hydrogen',\n\n    'ice',\n    'importance',\n    'inflation',\n    'information',\n    // 'injustice',\n    'innocence',\n    // 'intelligence',\n    'iron',\n    'irony',\n\n    'jam',\n    // 'jealousy',\n    // 'jelly',\n    'jewelry',\n    // 'joy',\n    'judo',\n    // 'juice',\n    // 'justice',\n\n    'karate',\n    // 'kindness',\n    'knowledge',\n\n    // 'labour',\n    'lack',\n    // 'land',\n    'laughter',\n    'lava',\n    'leather',\n    'leisure',\n    'lightning',\n    'linguine',\n    'linguini',\n    'linguistics',\n    'literature',\n    'litter',\n    'livestock',\n    'logic',\n    'loneliness',\n    // 'love',\n    'luck',\n    'luggage',\n\n    'macaroni',\n    'machinery',\n    'magic',\n    // 'mail',\n    'management',\n    'mankind',\n    'marble',\n    'mathematics',\n    'mayonnaise',\n    'measles',\n    // 'meat',\n    // 'metal',\n    'methane',\n    'milk',\n    'minus',\n    'money',\n    // 'moose',\n    'mud',\n    'music',\n    'mumps',\n\n    'nature',\n    'news',\n    'nitrogen',\n    'nonsense',\n    'nurture',\n    'nutrition',\n\n    'obedience',\n    'obesity',\n    // 'oil',\n    'oxygen',\n\n    // 'paper',\n    // 'passion',\n    'pasta',\n    'patience',\n    // 'permission',\n    'physics',\n    'poetry',\n    'pollution',\n    'poverty',\n    // 'power',\n    'pride',\n    // 'production',\n    // 'progress',\n    // 'pronunciation',\n    'psychology',\n    'publicity',\n    'punctuation',\n\n    // 'quality',\n    // 'quantity',\n    'quartz',\n\n    'racism',\n    // 'rain',\n    // 'recreation',\n    'relaxation',\n    'reliability',\n    'research',\n    'respect',\n    'revenge',\n    'rice',\n    'rubbish',\n    'rum',\n\n    'safety',\n    // 'salad',\n    // 'salt',\n    // 'sand',\n    // 'satire',\n    'scenery',\n    'seafood',\n    'seaside',\n    'series',\n    'shame',\n    'sheep',\n    'shopping',\n    // 'silence',\n    'sleep',\n    // 'slang'\n    'smoke',\n    'smoking',\n    'snow',\n    'soap',\n    'software',\n    'soil',\n    // 'sorrow',\n    // 'soup',\n    'spaghetti',\n    // 'speed',\n    'species',\n    // 'spelling',\n    // 'sport',\n    'steam',\n    // 'strength',\n    'stuff',\n    'stupidity',\n    // 'success',\n    // 'sugar',\n    'sunshine',\n    'symmetry',\n\n    // 'tea',\n    'tennis',\n    'thirst',\n    'thunder',\n    'timber',\n    // 'time',\n    // 'toast',\n    // 'tolerance',\n    // 'trade',\n    'traffic',\n    'transportation',\n    // 'travel',\n    'trust',\n\n    // 'understanding',\n    'underwear',\n    'unemployment',\n    'unity',\n    // 'usage',\n\n    'validity',\n    'veal',\n    'vegetation',\n    'vegetarianism',\n    'vengeance',\n    'violence',\n    // 'vision',\n    'vitality',\n\n    'warmth',\n    // 'water',\n    'wealth',\n    'weather',\n    // 'weight',\n    'welfare',\n    'wheat',\n    // 'whiskey',\n    // 'width',\n    'wildlife',\n    // 'wine',\n    'wisdom',\n    // 'wood',\n    // 'wool',\n    // 'work',\n\n    // 'yeast',\n    'yoga',\n\n    'zinc',\n    'zoology'\n  ];\n\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural : {\n      men       : new RegExp( '^(m|wom)en$'                    , 'gi' ),\n      people    : new RegExp( '(pe)ople$'                      , 'gi' ),\n      children  : new RegExp( '(child)ren$'                    , 'gi' ),\n      tia       : new RegExp( '([ti])a$'                       , 'gi' ),\n      analyses  : new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ),\n      hives     : new RegExp( '(hi|ti)ves$'                    , 'gi' ),\n      curves    : new RegExp( '(curve)s$'                      , 'gi' ),\n      lrves     : new RegExp( '([lr])ves$'                     , 'gi' ),\n      aves      : new RegExp( '([a])ves$'                      , 'gi' ),\n      foves     : new RegExp( '([^fo])ves$'                    , 'gi' ),\n      movies    : new RegExp( '(m)ovies$'                      , 'gi' ),\n      aeiouyies : new RegExp( '([^aeiouy]|qu)ies$'             , 'gi' ),\n      series    : new RegExp( '(s)eries$'                      , 'gi' ),\n      xes       : new RegExp( '(x|ch|ss|sh)es$'                , 'gi' ),\n      mice      : new RegExp( '([m|l])ice$'                    , 'gi' ),\n      buses     : new RegExp( '(bus)es$'                       , 'gi' ),\n      oes       : new RegExp( '(o)es$'                         , 'gi' ),\n      shoes     : new RegExp( '(shoe)s$'                       , 'gi' ),\n      crises    : new RegExp( '(cris|ax|test)es$'              , 'gi' ),\n      octopi    : new RegExp( '(octop|vir)i$'                  , 'gi' ),\n      aliases   : new RegExp( '(alias|canvas|status|campus)es$', 'gi' ),\n      summonses : new RegExp( '^(summons)es$'                  , 'gi' ),\n      oxen      : new RegExp( '^(ox)en'                        , 'gi' ),\n      matrices  : new RegExp( '(matr)ices$'                    , 'gi' ),\n      vertices  : new RegExp( '(vert|ind)ices$'                , 'gi' ),\n      feet      : new RegExp( '^feet$'                         , 'gi' ),\n      teeth     : new RegExp( '^teeth$'                        , 'gi' ),\n      geese     : new RegExp( '^geese$'                        , 'gi' ),\n      quizzes   : new RegExp( '(quiz)zes$'                     , 'gi' ),\n      whereases : new RegExp( '^(whereas)es$'                  , 'gi' ),\n      criteria  : new RegExp( '^(criteri)a$'                   , 'gi' ),\n      genera    : new RegExp( '^genera$'                       , 'gi' ),\n      ss        : new RegExp( 'ss$'                            , 'gi' ),\n      s         : new RegExp( 's$'                             , 'gi' )\n    },\n\n    singular : {\n      man       : new RegExp( '^(m|wom)an$'                  , 'gi' ),\n      person    : new RegExp( '(pe)rson$'                    , 'gi' ),\n      child     : new RegExp( '(child)$'                     , 'gi' ),\n      ox        : new RegExp( '^(ox)$'                       , 'gi' ),\n      axis      : new RegExp( '(ax|test)is$'                 , 'gi' ),\n      octopus   : new RegExp( '(octop|vir)us$'               , 'gi' ),\n      alias     : new RegExp( '(alias|status|canvas|campus)$', 'gi' ),\n      summons   : new RegExp( '^(summons)$'                  , 'gi' ),\n      bus       : new RegExp( '(bu)s$'                       , 'gi' ),\n      buffalo   : new RegExp( '(buffal|tomat|potat)o$'       , 'gi' ),\n      tium      : new RegExp( '([ti])um$'                    , 'gi' ),\n      sis       : new RegExp( 'sis$'                         , 'gi' ),\n      ffe       : new RegExp( '(?:([^f])fe|([lr])f)$'        , 'gi' ),\n      hive      : new RegExp( '(hi|ti)ve$'                   , 'gi' ),\n      aeiouyy   : new RegExp( '([^aeiouy]|qu)y$'             , 'gi' ),\n      x         : new RegExp( '(x|ch|ss|sh)$'                , 'gi' ),\n      matrix    : new RegExp( '(matr)ix$'                    , 'gi' ),\n      vertex    : new RegExp( '(vert|ind)ex$'                , 'gi' ),\n      mouse     : new RegExp( '([m|l])ouse$'                 , 'gi' ),\n      foot      : new RegExp( '^foot$'                       , 'gi' ),\n      tooth     : new RegExp( '^tooth$'                      , 'gi' ),\n      goose     : new RegExp( '^goose$'                      , 'gi' ),\n      quiz      : new RegExp( '(quiz)$'                      , 'gi' ),\n      whereas   : new RegExp( '^(whereas)$'                  , 'gi' ),\n      criterion : new RegExp( '^(criteri)on$'                , 'gi' ),\n      genus     : new RegExp( '^genus$'                      , 'gi' ),\n      s         : new RegExp( 's$'                           , 'gi' ),\n      common    : new RegExp( '$'                            , 'gi' )\n    }\n  };\n\n  var plural_rules = [\n\n    // do not replace if its already a plural word\n    [ regex.plural.men       ],\n    [ regex.plural.people    ],\n    [ regex.plural.children  ],\n    [ regex.plural.tia       ],\n    [ regex.plural.analyses  ],\n    [ regex.plural.hives     ],\n    [ regex.plural.curves    ],\n    [ regex.plural.lrves     ],\n    [ regex.plural.foves     ],\n    [ regex.plural.aeiouyies ],\n    [ regex.plural.series    ],\n    [ regex.plural.movies    ],\n    [ regex.plural.xes       ],\n    [ regex.plural.mice      ],\n    [ regex.plural.buses     ],\n    [ regex.plural.oes       ],\n    [ regex.plural.shoes     ],\n    [ regex.plural.crises    ],\n    [ regex.plural.octopi    ],\n    [ regex.plural.aliases   ],\n    [ regex.plural.summonses ],\n    [ regex.plural.oxen      ],\n    [ regex.plural.matrices  ],\n    [ regex.plural.feet      ],\n    [ regex.plural.teeth     ],\n    [ regex.plural.geese     ],\n    [ regex.plural.quizzes   ],\n    [ regex.plural.whereases ],\n    [ regex.plural.criteria  ],\n    [ regex.plural.genera    ],\n\n    // original rule\n    [ regex.singular.man      , '$1en' ],\n    [ regex.singular.person   , '$1ople' ],\n    [ regex.singular.child    , '$1ren' ],\n    [ regex.singular.ox       , '$1en' ],\n    [ regex.singular.axis     , '$1es' ],\n    [ regex.singular.octopus  , '$1i' ],\n    [ regex.singular.alias    , '$1es' ],\n    [ regex.singular.summons  , '$1es' ],\n    [ regex.singular.bus      , '$1ses' ],\n    [ regex.singular.buffalo  , '$1oes' ],\n    [ regex.singular.tium     , '$1a' ],\n    [ regex.singular.sis      , 'ses' ],\n    [ regex.singular.ffe      , '$1$2ves' ],\n    [ regex.singular.hive     , '$1ves' ],\n    [ regex.singular.aeiouyy  , '$1ies' ],\n    [ regex.singular.matrix   , '$1ices' ],\n    [ regex.singular.vertex   , '$1ices' ],\n    [ regex.singular.x        , '$1es' ],\n    [ regex.singular.mouse    , '$1ice' ],\n    [ regex.singular.foot     , 'feet' ],\n    [ regex.singular.tooth    , 'teeth' ],\n    [ regex.singular.goose    , 'geese' ],\n    [ regex.singular.quiz     , '$1zes' ],\n    [ regex.singular.whereas  , '$1es' ],\n    [ regex.singular.criterion, '$1a' ],\n    [ regex.singular.genus    , 'genera' ],\n\n    [ regex.singular.s     , 's' ],\n    [ regex.singular.common, 's' ]\n  ];\n\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n  var singular_rules = [\n\n    // do not replace if its already a singular word\n    [ regex.singular.man     ],\n    [ regex.singular.person  ],\n    [ regex.singular.child   ],\n    [ regex.singular.ox      ],\n    [ regex.singular.axis    ],\n    [ regex.singular.octopus ],\n    [ regex.singular.alias   ],\n    [ regex.singular.summons ],\n    [ regex.singular.bus     ],\n    [ regex.singular.buffalo ],\n    [ regex.singular.tium    ],\n    [ regex.singular.sis     ],\n    [ regex.singular.ffe     ],\n    [ regex.singular.hive    ],\n    [ regex.singular.aeiouyy ],\n    [ regex.singular.x       ],\n    [ regex.singular.matrix  ],\n    [ regex.singular.mouse   ],\n    [ regex.singular.foot    ],\n    [ regex.singular.tooth   ],\n    [ regex.singular.goose   ],\n    [ regex.singular.quiz    ],\n    [ regex.singular.whereas ],\n    [ regex.singular.criterion ],\n    [ regex.singular.genus ],\n\n    // original rule\n    [ regex.plural.men      , '$1an' ],\n    [ regex.plural.people   , '$1rson' ],\n    [ regex.plural.children , '$1' ],\n    [ regex.plural.genera   , 'genus'],\n    [ regex.plural.criteria , '$1on'],\n    [ regex.plural.tia      , '$1um' ],\n    [ regex.plural.analyses , '$1$2sis' ],\n    [ regex.plural.hives    , '$1ve' ],\n    [ regex.plural.curves   , '$1' ],\n    [ regex.plural.lrves    , '$1f' ],\n    [ regex.plural.aves     , '$1ve' ],\n    [ regex.plural.foves    , '$1fe' ],\n    [ regex.plural.movies   , '$1ovie' ],\n    [ regex.plural.aeiouyies, '$1y' ],\n    [ regex.plural.series   , '$1eries' ],\n    [ regex.plural.xes      , '$1' ],\n    [ regex.plural.mice     , '$1ouse' ],\n    [ regex.plural.buses    , '$1' ],\n    [ regex.plural.oes      , '$1' ],\n    [ regex.plural.shoes    , '$1' ],\n    [ regex.plural.crises   , '$1is' ],\n    [ regex.plural.octopi   , '$1us' ],\n    [ regex.plural.aliases  , '$1' ],\n    [ regex.plural.summonses, '$1' ],\n    [ regex.plural.oxen     , '$1' ],\n    [ regex.plural.matrices , '$1ix' ],\n    [ regex.plural.vertices , '$1ex' ],\n    [ regex.plural.feet     , 'foot' ],\n    [ regex.plural.teeth    , 'tooth' ],\n    [ regex.plural.geese    , 'goose' ],\n    [ regex.plural.quizzes  , '$1' ],\n    [ regex.plural.whereases, '$1' ],\n\n    [ regex.plural.ss, 'ss' ],\n    [ regex.plural.s , '' ]\n  ];\n\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n  var non_titlecased_words = [\n    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',\n    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'\n  ];\n\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );\n  var underbar          = new RegExp( '_', 'g' );\n  var space_or_underbar = new RegExp( '[\\ _]', 'g' );\n  var uppercase         = new RegExp( '([A-Z])', 'g' );\n  var underbar_prefix   = new RegExp( '^_' );\n\n  var inflector = {\n\n  /**\n   * A helper method that applies rules based replacement to a String.\n   * @private\n   * @function\n   * @param {String} str String to modify and return based on the passed rules.\n   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n   * @param {Array: [String]} skip Strings to skip if they match\n   * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n   * @returns {String} Return passed String modified by passed rules.\n   * @example\n   *\n   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n   */\n    _apply_rules : function ( str, rules, skip, override ){\n      if( override ){\n        str = override;\n      }else{\n        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );\n\n        if( !ignore ){\n          var i = 0;\n          var j = rules.length;\n\n          for( ; i < j; i++ ){\n            if( str.match( rules[ i ][ 0 ])){\n              if( rules[ i ][ 1 ] !== undefined ){\n                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This lets us detect if an Array contains a given element.\n   * @public\n   * @function\n   * @param {Array} arr The subject array.\n   * @param {Object} item Object to locate in the Array.\n   * @param {Number} from_index Starts checking from this position in the Array.(optional)\n   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n   * @returns {Number} Return index position in the Array of the passed item.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n   */\n    indexOf : function ( arr, item, from_index, compare_func ){\n      if( !from_index ){\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i     = from_index;\n      var j     = arr.length;\n\n      for( ; i < j; i++ ){\n        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n\n\n  /**\n   * This function adds pluralization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} Singular English language nouns are returned in plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.pluralize( 'person' ); // === 'people'\n   *     inflection.pluralize( 'octopus' ); // === 'octopi'\n   *     inflection.pluralize( 'Hat' ); // === 'Hats'\n   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n   */\n    pluralize : function ( str, plural ){\n      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n    },\n\n\n\n  /**\n   * This function adds singularization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @returns {String} Plural English language nouns are returned in singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.singularize( 'people' ); // === 'person'\n   *     inflection.singularize( 'octopi' ); // === 'octopus'\n   *     inflection.singularize( 'Hats' ); // === 'Hat'\n   *     inflection.singularize( 'guys', 'person' ); // === 'person'\n   */\n    singularize : function ( str, singular ){\n      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n    },\n\n\n  /**\n   * This function will pluralize or singularlize a String appropriately based on an integer value\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Number} count The number to base pluralization off of.\n   * @param {String} singular Overrides normal output with said String.(optional)\n   * @param {String} plural Overrides normal output with said String.(optional)\n   * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.inflect( 'people' 1 ); // === 'person'\n   *     inflection.inflect( 'octopi' 1 ); // === 'octopus'\n   *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n   *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n   *     inflection.inflect( 'person', 2 ); // === 'people'\n   *     inflection.inflect( 'octopus', 2 ); // === 'octopi'\n   *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n   *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n   */\n    inflect : function ( str, count, singular, plural ){\n      count = parseInt( count, 10 );\n\n      if( isNaN( count )) return str;\n\n      if( count === 0 || count > 1 ){\n        return inflector._apply_rules( str, plural_rules, uncountable_words, plural );\n      }else{\n        return inflector._apply_rules( str, singular_rules, uncountable_words, singular );\n      }\n    },\n\n\n\n  /**\n   * This function adds camelization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in camel case.\n   *                  additionally '/' is translated to '::'\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n   */\n    camelize : function ( str, low_first_letter ){\n      var str_path = str.split( '/' );\n      var i        = 0;\n      var j        = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for( ; i < j; i++ ){\n        str_arr = str_path[ i ].split( '_' );\n        k       = 0;\n        l       = str_arr.length;\n\n        for( ; k < l; k++ ){\n          if( k !== 0 ){\n            str_arr[ k ] = str_arr[ k ].toLowerCase();\n          }\n\n          first = str_arr[ k ].charAt( 0 );\n          first = low_first_letter && i === 0 && k === 0\n            ? first.toLowerCase() : first.toUpperCase();\n          str_arr[ k ] = first + str_arr[ k ].substring( 1 );\n        }\n\n        str_path[ i ] = str_arr.join( '' );\n      }\n\n      return str_path.join( '::' );\n    },\n\n\n\n  /**\n   * This function adds underscore support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n   *                  Passing true will return as entered.\n   * @returns {String} Camel cased words are returned as lower cased and underscored.\n   *                  additionally '::' is translated to '/'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n   *     inflection.underscore( 'MP', true ); // === 'MP'\n   */\n    underscore : function ( str, all_upper_case ){\n      if( all_upper_case && str === str.toUpperCase()) return str;\n\n      var str_path = str.split( '::' );\n      var i        = 0;\n      var j        = str_path.length;\n\n      for( ; i < j; i++ ){\n        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );\n        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );\n      }\n\n      return str_path.join( '/' ).toLowerCase();\n    },\n\n\n\n  /**\n   * This function adds humanize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n   *                                 Passing true will lowercase it.\n   * @returns {String} Lower case underscored words will be returned in humanized form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n   *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n   */\n    humanize : function ( str, low_first_letter ){\n      str = str.toLowerCase();\n      str = str.replace( id_suffix, '' );\n      str = str.replace( underbar, ' ' );\n\n      if( !low_first_letter ){\n        str = inflector.capitalize( str );\n      }\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds capitalization support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} All characters will be lower case and the first will be upper.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n   */\n    capitalize : function ( str ){\n      str = str.toLowerCase();\n\n      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n    },\n\n\n\n  /**\n   * This function replaces underscores with dashes in the string.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Replaces all spaces or underscores with dashes.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n   */\n    dasherize : function ( str ){\n      return str.replace( space_or_underbar, '-' );\n    },\n\n\n\n  /**\n   * This function adds titleize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Capitalizes words as you would for a book title.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n   */\n    titleize : function ( str ){\n      str         = str.toLowerCase().replace( underbar, ' ' );\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n      var d, k, l;\n\n      for( ; i < j; i++ ){\n        d = str_arr[ i ].split( '-' );\n        k = 0;\n        l = d.length;\n\n        for( ; k < l; k++){\n          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){\n            d[ k ] = inflector.capitalize( d[ k ]);\n          }\n        }\n\n        str_arr[ i ] = d.join( '-' );\n      }\n\n      str = str_arr.join( ' ' );\n      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds demodulize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Removes module names leaving only class names.(Ruby style)\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n   */\n    demodulize : function ( str ){\n      var str_arr = str.split( '::' );\n\n      return str_arr[ str_arr.length - 1 ];\n    },\n\n\n\n  /**\n   * This function adds tableize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return camel cased words into their underscored plural form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n   */\n    tableize : function ( str ){\n      str = inflector.underscore( str );\n      str = inflector.pluralize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds classification support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n   */\n    classify : function ( str ){\n      str = inflector.camelize( str );\n      str = inflector.singularize( str );\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds foreign key support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                 you can pass true to skip it.(optional)\n   * @returns {String} Underscored plural nouns become the camel cased singular form.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n   */\n    foreign_key : function ( str, drop_id_ubar ){\n      str = inflector.demodulize( str );\n      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';\n\n      return str;\n    },\n\n\n\n  /**\n   * This function adds ordinalize support to every String object.\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @returns {String} Return all found numbers their sequence like '22nd'.\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n   */\n    ordinalize : function ( str ){\n      var str_arr = str.split( ' ' );\n      var i       = 0;\n      var j       = str_arr.length;\n\n      for( ; i < j; i++ ){\n        var k = parseInt( str_arr[ i ], 10 );\n\n        if( !isNaN( k )){\n          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );\n          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );\n          var suf = 'th';\n\n          if( ltd != '11' && ltd != '12' && ltd != '13' ){\n            if( ld === '1' ){\n              suf = 'st';\n            }else if( ld === '2' ){\n              suf = 'nd';\n            }else if( ld === '3' ){\n              suf = 'rd';\n            }\n          }\n\n          str_arr[ i ] += suf;\n        }\n      }\n\n      return str_arr.join( ' ' );\n    },\n\n  /**\n   * This function performs multiple inflection methods on a string\n   * @public\n   * @function\n   * @param {String} str The subject string.\n   * @param {Array} arr An array of inflection methods.\n   * @returns {String}\n   * @example\n   *\n   *     var inflection = require( 'inflection' );\n   *\n   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n   */\n    transform : function ( str, arr ){\n      var i = 0;\n      var j = arr.length;\n\n      for( ;i < j; i++ ){\n        var method = arr[ i ];\n\n        if( inflector.hasOwnProperty( method )){\n          str = inflector[ method ]( str );\n        }\n      }\n\n      return str;\n    }\n  };\n\n/**\n * @public\n */\n  inflector.version = '1.12.0';\n\n  return inflector;\n}));\n","import { camelize, pluralize, singularize } from 'inflection';\n\n/**\n * A bit of vocabulary\n * \n * Consider this data:\n * {\n *     posts: [\n *          { id: 1, title: 'foo', user_id: 123 }\n *     ],\n *     users: [\n *          { id: 123, name: 'John Doe' }\n *     ]\n * }\n * \n * We'll use the following names:\n * - key: the keys in the data map, e.g. 'posts', 'users'\n * - type: for a key, the related type in the graphQL schema, e.g. 'posts' => 'Post', 'users' => 'User'\n * - field: the keys in a record, e.g. 'id', 'foo', user_id'\n * - relationship field: a key ending in '_id', e.g. 'user_id'\n * - related key: for a relationship field, the related key, e.g. 'user_id' => 'users'\n */\n\n/**\n * \n * @param {String} fieldName 'users'\n * @return {String} 'Users'\n */\nexport const getRelationshipFromKey = (key: string) => camelize(key);\n\n/**\n * \n * @param {String} fieldName 'users'\n * @return {String} 'User'\n */\nexport const getTypeFromKey = (key: string) => camelize(singularize(key));\n\n/**\n * \n * @param {String} fieldName 'user_id'\n * @return {String} 'users'\n */\nexport const getRelatedKey = (fieldName: string) =>\n    pluralize(fieldName.substr(0, fieldName.length - 3));\n\n/**\n * \n * @param {String} key 'users'\n * @return {String} 'user_id'\n */\nexport const getReverseRelatedField = (key: string) => `${singularize(key)}_id`;\n\n/**\n * \n * @param {String} fieldName 'user_id'\n * @return {String} 'User'\n */\nexport const getRelatedType = (fieldName: string) =>\n    getTypeFromKey(fieldName.substr(0, fieldName.length - 3));\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","import { GraphQLScalarType, GraphQLError } from 'graphql';\nimport { Kind } from 'graphql/language';\n\nexport default new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date type',\n    parseValue(value) {\n        // value comes from the client\n        return new Date(value); // sent to resolvers\n    },\n    serialize(value) {\n        // value comes from resolvers\n        return value.toISOString(); // sent to the client\n    },\n    parseLiteral(ast) {\n        // ast comes from parsing the query\n        // this is where you can validate and transform\n        if (ast.kind !== Kind.STRING) {\n            throw new GraphQLError(\n                `Query error: Can only parse dates strings, got a: ${ast.kind}`,\n                [ast]\n            );\n        }\n        if (isNaN(Date.parse(ast.value))) {\n            throw new GraphQLError(`Query error: not a valid date`, [ast]);\n        }\n        return new Date(ast.value);\n    },\n});\n","export function isObject(value: any) {\n    // console.log(value, Object.prototype.toString.call(value) === '[object Object]');\n    return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexport function isDate(value: any) {\n    return (value instanceof Date) || typeof value !== 'string' || Number.isInteger(value) || !isNaN(new Date(value).getDate())\n}\n\nexport function isFloat(value: string) {\n    const maybeFloat = parseFloat(value)\n    return !isNaN(maybeFloat) && isFinite(maybeFloat)\n}\n\nexport function every(values: any[], type: string | ((val: any) => boolean)) {\n    if (typeof type === 'function') {\n        return values.every(function (value) {\n            // console.log(value);\n            return type(value)\n        })\n    }\n    return values.every(function (value) {\n        return typeof value === type\n    })\n\n}","import { GraphQLObjectType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLID, GraphQLBoolean, GraphQLFloat, GraphQLInt, GraphQLString } from \"graphql\";\nimport DateType from \"./DateType\";\nimport { JsonObj } from \"./interfaces\";\nimport { getTypeFromKey } from \"./nameConverter\";\nimport { isFloat, isDate, isObject, every } from \"./utils\";\n\nexport class TypeMapper {\n    public pKey: string;\n    public subtypes: Record<string, TypeMapper> = {};\n\n    private _entities: JsonObj[];\n    private _typeName: string;\n    private _pKeys: Record<string, string>;\n    private _values: Record<string, any[]>\n    private _output: GraphQLObjectType;\n    private _input: GraphQLInputObjectType;\n    constructor(name: string, entities: JsonObj[], pKeys: Record<string, string> = {}) {\n        this._typeName = name\n        this._entities = entities\n        this.pKey = pKeys[getTypeFromKey(name)] || 'id'\n        this._pKeys = pKeys\n        this._getValuesFromEntities(entities)\n    }\n\n    private _getValuesFromEntities(entities: JsonObj[]) {\n        this._values = entities.reduce<Record<string, unknown[]>>((values, entity) => {\n            Object.keys(entity).forEach(fieldName => {\n                if (!values[fieldName]) {\n                    values[fieldName] = [];\n                }\n                if (entity[fieldName] != null) {\n                    values[fieldName].push(entity[fieldName]);\n                }\n            });\n            return values;\n        }, {});\n    }\n\n    private _getTypes(required = true) {\n        const fields = {}\n        for (const key of Object.keys(this._values)) {\n            const values = this._values[key]\n            const nonNull = required ? values.length === this._entities.length : false\n            let fieldType;\n            if (every(values, Array.isArray)) {\n                const listValues: any[] = [].concat(...values)\n                // console.log(this._typeName, \"Array\", values, listValues);\n                fieldType = new GraphQLList(this._getType(key, listValues))\n            } else {\n                // console.log(this._typeName, \"Single\", values);\n                fieldType = this._getType(key, values)\n            }\n            fields[key] = { type: this.subtypes[key] ? fieldType : nonNull ? GraphQLNonNull(fieldType) : fieldType }\n        }\n        return fields\n    }\n    private _getType(name: string, values: any[]) {\n        if (\n            name === this.pKey ||\n            name.substr(name.length - 3) === '_id' ||\n            Object.values(this._pKeys).includes(name)\n        ) {\n            return GraphQLID\n        }\n        if (every(values, isObject)) {\n            if (this.subtypes[name]) return this.subtypes[name].Output\n            this.subtypes[name] = new TypeMapper(name, values, this._pKeys)\n            return this.subtypes[name].Output\n        }\n        if (every(values, 'boolean')) {\n            return GraphQLBoolean\n        }\n        if (every(values, Number.isInteger)) {\n            return GraphQLInt\n        }\n        if (every(values, isFloat)) {\n            return GraphQLFloat\n        }\n        if (every(values, isDate)) {\n            return DateType\n        }\n        return GraphQLString\n    }\n\n    private _getRangeFilters() {\n        return Object.keys(this._values).reduce<Record<string, any>>((fields, fieldName) => {\n            const fieldType = this._getType(\n                fieldName,\n                this._values[fieldName],\n            );\n            if (\n                fieldType == GraphQLInt ||\n                fieldType == GraphQLFloat ||\n                fieldName == 'Date'\n            ) {\n                fields[`${fieldName}_lt`] = { type: fieldType };\n                fields[`${fieldName}_lte`] = { type: fieldType };\n                fields[`${fieldName}_gt`] = { type: fieldType };\n                fields[`${fieldName}_gte`] = { type: fieldType };\n            }\n            return fields;\n        }, {});\n    }\n\n    public get Output(): GraphQLObjectType {\n        if (this._output) return this._output\n        this._output = new GraphQLObjectType({\n            name: getTypeFromKey(this._typeName),\n            fields: this._getTypes()\n        })\n        return this._output\n    }\n\n    public get Input(): GraphQLInputObjectType {\n        if (this._input) return this._input\n        this._input = new GraphQLInputObjectType({\n            name: `${getTypeFromKey(this._typeName)}Filter`,\n            fields: Object.assign(\n                {\n                    q: { type: GraphQLString },\n                },\n                this._getTypes(false),\n                this._getRangeFilters()\n            ),\n        })\n        return this._input\n    }\n}","import { extendSchema, GraphQLBoolean, GraphQLID, GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, GraphQLString, parse } from \"graphql\";\nimport { _GraphQLNonNull } from \"graphql/type/definition\";\nimport { camelize, pluralize } from \"inflection\";\nimport { JsonData } from \"./interfaces\";\nimport { getRelatedType, getTypeFromKey } from \"./nameConverter\";\nimport { TypeMapper } from './TypeMapper'\n\nconst listMetadataType: GraphQLObjectType = new GraphQLObjectType({\n    name: 'ListMetadata',\n    fields: {\n        count: { type: GraphQLInt },\n    },\n});\n\nexport class SchemaBuilder {\n    private _jsonData: JsonData;\n    private _types: Record<string, TypeMapper> = {}\n    private _primaryKeys: Record<string, string>;\n    private _extensions: string\n    private _schema: GraphQLSchema\n    constructor(data: JsonData, pKeys: string = \"\") {\n        this._jsonData = data\n        this._buildPrimaryKeyObj(pKeys)\n        this._parseTypes()\n    }\n    private _buildPrimaryKeyObj(pKeys: string) {\n        if (pKeys) {\n            const keysArr = pKeys.split(',')\n            if (keysArr.length > 0) {\n                this._primaryKeys = this._primaryKeys || {}\n                for (const pKey of keysArr) {\n                    const [key, value] = pKey.split(':')\n                    this._primaryKeys[getTypeFromKey(key)] = value\n                }\n            }\n        }\n\n    }\n    private _parseTypes() {\n        for (const key of Object.keys(this._jsonData)) {\n            this._types[key] = new TypeMapper(key, this._jsonData[key], this._primaryKeys)\n            if (this._types[key].subtypes) {\n                for (const subKey of Object.keys(this._types[key].subtypes)) {\n                    this._types[subKey] = this._types[key].subtypes[subKey]\n                }\n            }\n        }\n    }\n    private _buildQuery(): GraphQLObjectType {\n        return new GraphQLObjectType({\n            name: 'Query',\n            fields: Object.values(this._types).reduce<Record<string, any>>((fields, type) => {\n                fields[type.Output.name] = {\n                    type: type.Output,\n                    args: {\n                        [type.pKey]: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                fields[`all${camelize(pluralize(type.Output.name))}`] = {\n                    type: new GraphQLList(type.Output),\n                    args: {\n                        page: { type: GraphQLInt },\n                        perPage: { type: GraphQLInt },\n                        sortField: { type: GraphQLString },\n                        sortOrder: { type: GraphQLString },\n                        filter: { type: type.Input },\n                    },\n                };\n                fields[`_all${camelize(pluralize(type.Output.name))}Meta`] = {\n                    type: listMetadataType,\n                    args: {\n                        page: { type: GraphQLInt },\n                        perPage: { type: GraphQLInt },\n                        filter: { type: GraphQLString },\n                    },\n                };\n                return fields;\n            }, {}),\n        })\n    }\n\n    private _buildMutation(): GraphQLObjectType {\n        return new GraphQLObjectType({\n            name: 'Mutation',\n            fields: Object.values(this._types).reduce<Record<string, any>>((fields, type) => {\n                const typeFields = type.Output.getFields();\n                const nullableTypeFields = Object.keys(\n                    typeFields\n                ).reduce<Record<string, any>>((f, fieldName) => {\n                    f[fieldName] = Object.assign({}, typeFields[fieldName], {\n                        type:\n                            fieldName !== type.pKey &&\n                                typeFields[fieldName].type instanceof GraphQLNonNull\n                                ? (typeFields[fieldName].type as any).ofType\n                                : typeFields[fieldName].type,\n                    });\n                    return f;\n                }, {});\n                fields[`create${type.Output.name}`] = {\n                    type: type.Output,\n                    args: typeFields,\n                };\n                fields[`update${type.Output.name}`] = {\n                    type: type.Output,\n                    args: nullableTypeFields,\n                };\n                fields[`remove${type.Output.name}`] = {\n                    type: GraphQLBoolean,\n                    args: {\n                        [type.pKey]: { type: new GraphQLNonNull(GraphQLID) },\n                    },\n                };\n                return fields;\n            }, {}),\n        })\n    }\n    private _isRelationshipField(pKey: string) {\n        const primaryKeys = this._primaryKeys ? Object.values(this._primaryKeys).filter((key) => key !== pKey) : false\n        return function (fieldName: string) {\n            return (primaryKeys ? fieldName.endsWith('_id') || primaryKeys.includes(fieldName) : fieldName.endsWith('_id'))\n        }\n    }\n\n    private _getRelatedType(fieldName: string) {\n        if (this._primaryKeys) {\n            return Object.keys(this._primaryKeys).find(key => this._primaryKeys[key] === fieldName) || getRelatedType(fieldName)\n        }\n        return getRelatedType(fieldName)\n    }\n    private _buildExtensions() {\n        return Object.values(this._types).reduce((ext, type) => {\n            Object.keys(type.Output.getFields())\n                .filter(this._isRelationshipField(type.pKey))\n                .map(fieldName => {\n                    const relType = this._getRelatedType(fieldName);\n                    const rel = pluralize(type.Output.toString());\n                    ext += `\n    extend type ${type.Output} { ${relType}: ${relType} }\n    extend type ${relType} { ${rel}: [${type.Output}] }`;\n                });\n            return ext;\n        }, '')\n    }\n\n    public get schema() {\n        if (this._schema) return this._schema\n        const _schema = new GraphQLSchema({\n            query: this._buildQuery(),\n            mutation: this._buildMutation()\n        })\n        this._extensions = this._buildExtensions()\n        this._schema = this._extensions\n            ? extendSchema(_schema, parse(this._extensions))\n            : _schema;\n        return this._schema\n    }\n}"],"names":["this","camelize","singularize","pluralize","GraphQLScalarType","GraphQLError","GraphQLList","GraphQLNonNull","GraphQLID","GraphQLBoolean","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLObjectType","GraphQLInputObjectType","GraphQLSchema","extendSchema","parse"],"mappings":"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"}